#!/bin/sh

#username=ubnt
#password=ubnt
#baseurl=https://unifi:8443
#site=default

[ -f ./unifi_sh_env ] && . ./unifi_sh_env

cookie=/tmp/unifi_cookie

curl_cmd="curl --tlsv1 --silent --cookie ${cookie} --cookie-jar ${cookie} --insecure "

# Функция для логирования в API библиотеке
api_log() {
    local level="$1"
    shift
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [API-$level] $*" >&2
}

api_log_info() {
    api_log "INFO" "$@"
}

api_log_debug() {
    if [ "$DEBUG" == "true" ]; then
        api_log "DEBUG" "$@"
    fi
}

api_log_error() {
    api_log "ERROR" "$@"
}

# Функция для выполнения curl с логированием
curl_with_log() {
    local url="$1"
    shift
    local extra_args="$@"
    
    api_log_debug "Выполнение запроса: $url"
    api_log_debug "Параметры curl: $extra_args"
    
    # Выполняем запрос с получением HTTP кода
    local response=$(${curl_cmd} -w "\nHTTP_CODE:%{http_code}" $extra_args "$url" 2>&1)
    local http_code=$(echo "$response" | grep "HTTP_CODE:" | cut -d: -f2)
    local body=$(echo "$response" | sed '/HTTP_CODE:/d')
    
    api_log_debug "HTTP код ответа: $http_code"
    
    if [ "$DEBUG" == "true" ]; then
        local body_preview=$(echo "$body" | head -c 200)
        if [ -z "$body_preview" ]; then
            api_log_debug "Тело ответа: <пусто>"
        else
            api_log_debug "Тело ответа (первые 200 символов): $body_preview"
        fi
    fi
    
    # Анализ кода ответа
    case "$http_code" in
        "")
            api_log_error "Не удалось получить HTTP код (возможно, ошибка curl)"
            ;;
        "000")
            api_log_error "Ошибка подключения: сервер недоступен (HTTP 000)"
            api_log_error "Проверьте: 1) доступность сервера, 2) правильность URL в конфигурации, 3) сетевое подключение"
            ;;
        "200")
            # Успешный запрос
            ;;
        "401")
            api_log_error "Ошибка авторизации (HTTP 401): неверные учетные данные"
            ;;
        "403")
            api_log_error "Доступ запрещен (HTTP 403)"
            ;;
        "404")
            api_log_error "Ресурс не найден (HTTP 404): $url"
            ;;
        "500"|"502"|"503")
            api_log_error "Ошибка сервера (HTTP $http_code)"
            ;;
        *)
            api_log_error "Получен неуспешный HTTP код: $http_code"
            ;;
    esac
    
    if [ -z "$body" ] && [ "$http_code" = "200" ]; then
        api_log_error "Получен пустой ответ от сервера (несмотря на HTTP 200)"
    fi
    
    echo "$body"
}

named_args_to_payload() {
    payload=""
    for a in "$@" ; do
        if [ "${a##*=*}" = "" ] ; then
            k=`echo $a | cut -d = -f 1`
            v=`echo $a | cut -d = -f 2`
            payload="${payload}, '$k':'$v'"
        fi
    done
    echo ${payload}
}

unifi_requires() {
    if [ -z "$username" -o -z "$password" -o -z "$baseurl" -o -z "$site" ] ; then
        echo "Error! please define required env vars before including unifi_sh. E.g. "
        echo ""
        echo "export username=ubnt"
        echo "export password=ubnt"
        echo "export baseurl=https://localhost:8443"
        echo "export site=default"
        echo ""
        return
    fi
}

unifi_login() {
    # authenticate against unifi controller
    api_log_info "Начало авторизации в UniFi Controller: $baseurl"
    api_log_debug "Пользователь: $username, Сайт: $site"
    local result=$(curl_with_log "$baseurl/api/login" --data "{'username':'$username', 'password':'$password'}")
    api_log_info "Авторизация завершена"
    echo "$result"
}

unifi_logout() {
    # logout
    api_log_info "Выход из UniFi Controller"
    curl_with_log "$baseurl/logout"
    api_log_info "Выход завершен"
}

unifi_api() {
    if [ $# -lt 1 ] ; then
        echo "Usage: $0 <uri> [json]"
        echo "    uri example /stat/sta "
        return
    fi
    uri=$1
    shift
    [ "${uri:0:1}" != "/" ] && uri="/$uri"
    json="$@"
    [ "$json" = "" ] && json="{}"
    api_log_debug "Вызов API: $baseurl/api/s/$site$uri"
    api_log_debug "JSON данные: $json"
    curl_with_log "$baseurl/api/s/$site$uri" --data "$json"
}

# cmd/stamgr
# authorize-guest(mac, minutes, [up=kbps, down=kbps, bytes=MB])
unifi_authorize_guest() {
    if [ $# -lt 2 ] ; then
        echo "Usage: $0 <mac> <minutes> [up=kbps] [down=kbps] [bytes=MB] [ap_mac=mac]"
        return
    fi

    mac=$1
    minutes=$2
    other_payload=`named_args_to_payload "$@"`
    
    api_log_info "Авторизация гостя: MAC=$mac, Минуты=$minutes"
    api_log_debug "Дополнительные параметры: $other_payload"

    ${curl_cmd} --data "json={'cmd':'authorize-guest', 'mac':'${mac}', 'minutes':${minutes}${other_payload}}" $baseurl/api/s/$site/cmd/stamgr
}

# cmd/stamgr
# unauthorize-guest(mac)
unifi_unauthorize_guest() {
    if [ $# -lt 1 ] ; then
        echo "Usage: $0 <mac>"
        return
    fi

    mac=$1

    ${curl_cmd} --data "json={'cmd':'unauthorize-guest', 'mac':'${mac}'}" $baseurl/api/s/$site/cmd/stamgr
}

# cmd/stamgr
# kick-sta(mac)
unifi_reconnect_sta() {
    if [ $# -lt 1 ] ; then
        echo "Usage: $0 <mac>"
        return
    fi

    mac=$1

    ${curl_cmd} --data "json={'cmd':'kick-sta', 'mac':'${mac}'}" $baseurl/api/s/$site/cmd/stamgr
}

# cmd/stamgr
# block-sta(mac)
unifi_block_sta() {
    if [ $# -lt 1 ] ; then
        echo "Usage: $0 <mac>"
        return
    fi

    mac=$1

    ${curl_cmd} --data "json={'cmd':'block-sta', 'mac':'${mac}'}" $baseurl/api/s/$site/cmd/stamgr
}

unifi_backup() {
    if [ "$1" = "" ]; then
        output=unifi-backup.unf # or `date +%Y%m%d`.unf
    else
        output=$1
    fi

    api_log_info "Запуск резервного копирования контроллера"
    api_log_info "Файл резервной копии: $output"
    
    # ask controller to do a backup, response contains the path to the backup file
    path=`$curl_cmd --data "json={'cmd':'backup'}" $baseurl/api/s/$site/cmd/backup | sed -n 's/.*\(\/dl.*unf\).*/\1/p'`
    
    api_log_debug "Путь к резервной копии: $path"

    # download the backup to the destinated output file
    $curl_cmd $baseurl$path -o $output
    
    api_log_info "Резервное копирование завершено"
}

# cmd/hotspot
# create-voucher(expires, n, [note=notes, up=kbps, down=kbps, bytes=MB])
# @returns create_time
unifi_create_voucher() {
    if [ $# -lt 2 ] ; then
        echo "Usage: $0 <minutes> <n> [note=notes] [up=kbps] [down=kbps] [bytes=MB]"
        return
    fi
    minutes=$1
    n=$2
    other_payload=`named_args_to_payload "$@"`
    
    api_log_info "Создание ваучеров: количество=$n, срок действия=$minutes минут"
    api_log_debug "Дополнительные параметры: $other_payload"
    
    token=`${curl_cmd} --data "json={'cmd':'create-voucher','expire':${minutes},'n':$n ${other_payload}}" $baseurl/api/s/$site/cmd/hotspot \
        | sed -e 's/.*"create_time"\s*:\s*\([0-9]\+\).*/\1/'`
    echo "token=$token"
    
    api_log_info "Ваучеры созданы, токен: $token"
    
    if [ "$token" != "" ] ; then
        ${curl_cmd} --data "json={'create_time':${token}}" $baseurl/api/s/$site/stat/voucher
    fi
}

# stat/voucher
# query(create_time)
unifi_get_vouchers() {
    set -x
    if [ $# -lt 0 ] ; then
        echo "Usage: $0 [token]"
        return
    fi
    token=$1
    [ "$token" != "" ] && other_payload="'create_time':${token}"
    ${curl_cmd} --data "json={${other_payload}}" $baseurl/api/s/$site/stat/voucher
    echo ${curl_cmd} --data "json={${other_payload}}" $baseurl/api/s/$site/stat/voucher
}

# delete-voucher(id)
unifi_delete_voucher() {
    if [ $# -lt 1 ] ; then
        echo "Usage: $0 <id>"
        return
    fi
    id=$1
    ${curl_cmd} --data "json={'cmd':'delete-voucher','_id':'${id}'}" $baseurl/api/s/$site/cmd/hotspot
}

# stat/sta
unifi_list_sta() {
    api_log_info "Получение списка подключенных станций (клиентов)"
    curl_with_log "$baseurl/api/s/$site/stat/sta" --data "json={}"
}

# upgrade device to the given firmware
unifi_upgrade_external() {
    if [ $# -lt 2 ] ; then
	echo "Usage: $0 <mac> <firmware_url>"
	return
    fi
    
    mac=$1
    firmware_url=$2

    api_log_info "Обновление устройства с внешней прошивкой: MAC=$mac"
    api_log_debug "URL прошивки: $firmware_url"

    ${curl_cmd} --data "json={'url':'${firmware_url}', 'mac':'${mac}'}" $baseurl/api/s/$site/cmd/devmgr/upgrade-external
    
    api_log_info "Команда обновления отправлена"
}


unifi_requires

